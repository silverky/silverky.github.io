<rss xmlns:dc="httpssssss://purl.org/dc/elements/1.1/" xmlns:content="httpssssss://purl.org/rss/1.0/modules/content/" xmlns:atom="httpssssss://www.w3.org/2005/Atom" xmlns:media="httpssssss://search.yahoo.com/mrss/" version="2.0"><channel><title>CodePod</title><description>Thoughts, stories and ideas about code</description><link>httpsssssss://silverky.github.io/</link><image><url>httpsssssss://silverky.github.io/favicon.png</url><title>CodePod</title><link>httpsssssss://silverky.github.io/</link></image><generator>Ghost 3.19</generator><lastBuildDate>Mon, 15 Jun 2020 10:01:11 GMT</lastBuildDate><atom:link href="httpsssssss://silverky.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Build fault-tolerant microservices</title><description>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;This developer code pattern demonstrates the deployment of a Open Liberty application using Eclipse MicroProfile on Kubernetes. It uses Prometheus to scrape application metrics and the Grafana platform for analytics and monitoring. The application uses MicroProfile Release 2.1 and focuses on fault-tolerance, which is one of the features&lt;/p&gt;</description><link>httpsssssss://silverky.github.io/build-fault-tolerant-microservices/</link><guid isPermaLink="false">5ee72ac8c6109770d9cb6e0c</guid><category>microservices</category><dc:creator>dungbv</dc:creator><pubDate>Mon, 15 Jun 2020 08:01:24 GMT</pubDate><content:encoded>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;This developer code pattern demonstrates the deployment of a Open Liberty application using Eclipse MicroProfile on Kubernetes. It uses Prometheus to scrape application metrics and the Grafana platform for analytics and monitoring. The application uses MicroProfile Release 2.1 and focuses on fault-tolerance, which is one of the features in that release.&lt;/p&gt;&lt;h2 id="description"&gt;Description&lt;/h2&gt;&lt;p&gt;All microservices fail, and it’s is important to create resilient microservices. Eclipse MicroProfile Fault Tolerance provides a simple, configurable, and flexible solution to create a fault-tolerant microservice. It offers the following fault-tolerance policies:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Timeout&lt;/strong&gt;: Define a duration for timeout.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Retry&lt;/strong&gt;: Define a criteria on when to retry.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Fallback&lt;/strong&gt;: Provides an alternative solution for a failed execution.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Bulkhead&lt;/strong&gt;: Isolates failures in part of the system while the rest of the system can still function.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CircuitBreaker&lt;/strong&gt;: Offers a way of fast-fail by automatically failing execution to prevent the system overloading and indefinite wait or timeout by the clients.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;: Invoke the operation asynchronously.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The main design is to separate execution logic from execution. The execution can be configured with fault-tolerance policies.&lt;/p&gt;&lt;p&gt;MicroProfile is a baseline platform definition that optimizes Enterprise Java for a microservices architecture and delivers application portability across multiple MicroProfile runtimes. Since the release of MicroProfile 1.2, the metrics feature comes out of the box with the platform.&lt;/p&gt;&lt;p&gt;The &lt;a href="httpsssssss://github.com/IBM/sample.microservices.web-app"&gt;sample application&lt;/a&gt; used is a web application for managing a conference and is based on a number of discrete microservices. The front end is written in Angular; the backing microservices are in Java. All run on Open Liberty, in Docker containers managed by Kubernetes. It’s based on a &lt;a href="httpsssssss://github.com/eclipse/microprofile-conference"&gt;demo application&lt;/a&gt; from the MicroProfile platform team. The &lt;a href="httpsssssss://github.com/IBM/sample.microservices.web-app"&gt;fork sample application&lt;/a&gt; was converted to use Open Liberty and Microprofile Metrics, which is part of Microprofile Release 2.1.&lt;/p&gt;&lt;h2 id="flow"&gt;Flow&lt;/h2&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/patterns/build-fault-tolerant-microservices-with-java/images/flow.png" class="kg-image" alt="flow"&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;Create Kubernetes service in &lt;a href="httpsssssss://cloud.ibm.com/?cm_sp=ibmdev-_-developer-patterns-_-cloudreg"&gt;IBM Cloud&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Deploy all the microservices into the Kubernetes cluster.&lt;/li&gt;&lt;li&gt;Deploy Prometheus server as a service into the Kubernetes cluster.&lt;/li&gt;&lt;li&gt;Deploy Grafana as a service into the Kubernetes cluster.&lt;/li&gt;&lt;li&gt;Use Ingress gateway to expose the web application from the Kubernetes cluster.&lt;/li&gt;&lt;li&gt;User accesses the web application through browser.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="instructions"&gt;Instructions&lt;/h2&gt;&lt;p&gt;Ready to get started? See the &lt;a href="httpsssssss://github.com/IBM/java-microprofile-fault-monitoring/blob/master/README.md"&gt;README&lt;/a&gt; for step-by-step instructions.&lt;/p&gt;</content:encoded></item><item><title>Build a secure microservices-based banking application</title><description>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;In this code pattern, we demonstrate the security and orchestration of microservices using a personal banking use-case scenario.&lt;/p&gt;&lt;h2 id="description"&gt;Description&lt;/h2&gt;&lt;p&gt;In a microservices-based solution, security and orchestration of workflows are common requirements. By using IBM API Connect for OAuth-based authentication and authorization to microservices and by using IBM App Connect&lt;/p&gt;</description><link>httpsssssss://silverky.github.io/build-a-secure-microservices-based-banking-application/</link><guid isPermaLink="false">5ee72a79c6109770d9cb6e05</guid><dc:creator>dungbv</dc:creator><pubDate>Mon, 15 Jun 2020 08:00:37 GMT</pubDate><content:encoded>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;In this code pattern, we demonstrate the security and orchestration of microservices using a personal banking use-case scenario.&lt;/p&gt;&lt;h2 id="description"&gt;Description&lt;/h2&gt;&lt;p&gt;In a microservices-based solution, security and orchestration of workflows are common requirements. By using IBM API Connect for OAuth-based authentication and authorization to microservices and by using IBM App Connect to seamlessly integrate APIs (with zero code) into our application, we can build a secure microservices-based personal banking application that allows users to transfer funds.&lt;/p&gt;&lt;p&gt;After using this code pattern, you will understand how to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Authenticate and authorize using OAuth in API Connect.&lt;/li&gt;&lt;li&gt;Orchestrate of APIs using App Connect.&lt;/li&gt;&lt;li&gt;Build and deploy Node.js microservices on &lt;a href="httpsssssss://www.ibm.com/cloud/kubernetes-service/"&gt;IBM Kubernetes Service&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Develop a client application using Node-RED.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="flow"&gt;Flow&lt;/h2&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/patterns/build-a-secure-microservices-based-application-with-transactional-flows/images/api-connect-app-connect-arch.png" class="kg-image" alt="Architecture flow for secure microservices-based banking app using API Connect and App Connect"&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;The user logs in to the client application.&lt;/li&gt;&lt;li&gt;The login request is sent to API Connect.&lt;/li&gt;&lt;li&gt;API Connect uses the Login API (a microservice deployed on IBM Kubernetes Service that interacts with MongoDB) for authentication and then generates an OAuth token for authorization.&lt;/li&gt;&lt;li&gt;The user invokes the funds transfer transaction using the OAuth token. The transaction request goes to App Connect, which internally uses &lt;code&gt;Account Management&lt;/code&gt; API, &lt;code&gt;Credit Account&lt;/code&gt; API and &lt;code&gt;Debit Account&lt;/code&gt; API (all of which are microservices deployed on IBM Kubernetes Service and that interact with MongoDB).&lt;/li&gt;&lt;/ol&gt;&lt;h2 id="instructions"&gt;Instructions&lt;/h2&gt;&lt;p&gt;Ready to put this code pattern to use? Complete details on how to get started running and using this application are in the &lt;a href="httpsssssss://github.com/IBM/microservices-using-apiconnect-and-appconnect/blob/master/README.md"&gt;README&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Design and deliver a REST-based, cloud-native application at lightning speed</title><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;For a software delivery project to be successful, alignment is required across multiple enterprise disciplines, such as development, operations, security, and compliance. The Accelerators for Teams feature in &lt;a href="httpsssssss://developer.ibm.com/components/cloud-pak-for-applications/"&gt;IBM Cloud Pak for Applications&lt;/a&gt; is designed to speed up the development of cloud-native applications by enabling multi-disciplinary teams to codify&lt;/p&gt;</description><link>httpsssssss://silverky.github.io/design-and-deliver-a-rest-based-cloud-native-application-at-lightning-speed/</link><guid isPermaLink="false">5ee72812c6109770d9cb6dbb</guid><category>cloud</category><category>rest</category><dc:creator>dungbv</dc:creator><pubDate>Mon, 15 Jun 2020 07:57:46 GMT</pubDate><content:encoded>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;&lt;p&gt;For a software delivery project to be successful, alignment is required across multiple enterprise disciplines, such as development, operations, security, and compliance. The Accelerators for Teams feature in &lt;a href="httpsssssss://developer.ibm.com/components/cloud-pak-for-applications/"&gt;IBM Cloud Pak for Applications&lt;/a&gt; is designed to speed up the development of cloud-native applications by enabling multi-disciplinary teams to codify and centrally manage decisions, improving the end-to-end journey from a business problem to a production application. The article &lt;em&gt;&lt;em&gt;&lt;a href="httpsssssss://developer.ibm.com/articles/introduction-to-accelerators-for-cloud-native-solutions"&gt;Introduction to accelerators for cloud-native solutions&lt;/a&gt;&lt;/em&gt;&lt;/em&gt; explains the full value proposition behind Accelerators for Teams and how you can leverage this innovative technology to expedite development.&lt;/p&gt;&lt;p&gt;This tutorial covers the new Accelerator for Cloud-native Apps, demonstrating how you can use one of the &lt;em&gt;&lt;em&gt;Reference Blueprints&lt;/em&gt;&lt;/em&gt; to quickly move from design to deployment of an app that contains only sample REST-based microservices. Before starting the tutorial, let’s cover a few basics.&lt;/p&gt;&lt;h3 id="the-advantages-of-a-cloud-native-architecture"&gt;The advantages of a cloud-native architecture&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;em&gt;Cloud-native&lt;/em&gt;&lt;/em&gt; is an industry term that is used to describe applications that are architected, built, and optimized to run on the cloud. Cloud-native applications are typically implemented as loosely-coupled microservices, run in containers, and managed by an orchestration system such as Kubernetes. By nature, these applications are elastic, meaning that they can scale autonomously based on the demand that is placed on an application. They are also portable between different clouds. Cloud-native applications take advantage of modern software delivery practices such as continuous integration (CI), continuous delivery (CD), DevOps, and GitOps.&lt;/p&gt;&lt;p&gt;Here are some of the advantages of moving to a cloud-native architecture:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Loose coupling between microservices&lt;/li&gt;&lt;li&gt;Lightweight services with a small code base&lt;/li&gt;&lt;li&gt;Elasticity&lt;/li&gt;&lt;li&gt;Portability&lt;/li&gt;&lt;li&gt;Language agnostic&lt;/li&gt;&lt;li&gt;Integration with continuous integration and continuous delivery (CI/CD) systems&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The IBM Cloud Architecture Center hosts a full &lt;a href="httpsssssss://www.ibm.com/cloud/architecture/architectures/cloud-native"&gt;reference architecture for cloud-native solutions&lt;/a&gt;, which contains some valuable resources for developing cloud-native applications.&lt;/p&gt;&lt;p&gt;The Accelerator for Cloud-native Apps, a technology preview in IBM Cloud Pak for Applications v4.2, provides an end-to-end workflow for developing REST-based microservice applications. REST-based microservices communicate with each other over HTTP, using APIs typically defined in an OpenAPI specification document.&lt;/p&gt;&lt;p&gt;By using the Accelerator for Cloud-native Apps, a solution architect can design a microservice application architecture comprised of REST-based microservices based on Open Liberty, Spring, Quarkus, and Node.js technologies. The architect can also specify how the microservices interact with each other within a complete topology. Then, skeleton Git repositories can be generated for each microservice, alongside a GitOps repository so that the complete application can be automatically generated, ready for deployment via continuous delivery pipelines.&lt;/p&gt;&lt;p&gt;The Accelerator for Cloud-native Apps provides a &lt;em&gt;&lt;em&gt;Reference Blueprint&lt;/em&gt;&lt;/em&gt; for the StoreFront application that implements a REST-based microservice scenario.&lt;/p&gt;&lt;h3 id="about-the-storefront-reference-blueprint"&gt;About the StoreFront Reference Blueprint&lt;/h3&gt;&lt;p&gt;The StoreFront blueprint is based on the IBM Cloud reference architecture for BlueCompute, which is illustrated in the following diagram:&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/tutorials/accelerator-for-cloud-native-apps/images/storefront-blueprint.jpg" class="kg-image" alt="Detailed reference architecture diagram illustrating a Web Backend for Frontend (`webbff`) microservice connected to backend microservices, which are in turn, connected to backend microservices. More information is provided in the text that follows."&gt;&lt;/figure&gt;&lt;p&gt;The blueprint represents an application for online shopping. Customers can browse through a catalog that contains a selection of antique computing devices and make a purchase.&lt;/p&gt;&lt;p&gt;You can learn more about BlueCompute in the IBM Cloud Architecture Center. See &lt;em&gt;&lt;em&gt;&lt;a href="httpsssssss://www.ibm.com/cloud/architecture/architectures/deploy-retail-app-on-openshift"&gt;Deploy a retail application on RedHat OpenShift&lt;/a&gt;&lt;/em&gt;&lt;/em&gt;.&lt;/p&gt;&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;To work through this tutorial you must have the following pre-requisites in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Install &lt;a href="httpsssssss://www.ibm.com/support/knowledgecenter/SSCSJL_4.2.x/install-icpa-cli.html"&gt;IBM Cloud Pak for Applications v4.2&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Install the &lt;a href="httpsssssss://www-.ibm.com/support/knowledgecenter/SSCSJL_4.2.x/techpreview/installing.html"&gt;Accelerator technology preview&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Create a &lt;a href="httpsssssss://github.com/"&gt;GitHub&lt;/a&gt; account.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="estimated-time"&gt;Estimated time&lt;/h2&gt;&lt;p&gt;Completing this tutorial should take about 30 minutes.&lt;/p&gt;&lt;h2 id="steps"&gt;Steps&lt;/h2&gt;&lt;p&gt;To demonstrate how the Accelerator for Cloud-native Apps can help speed up application development and deployment, the following tutorial steps walk you through an end-to-end workflow that uses the StoreFront Reference Blueprint.&lt;/p&gt;&lt;h3 id="step-1-create-a-github-organization-for-the-storefront-artifacts"&gt;Step 1: Create a GitHub organization for the StoreFront artifacts&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;In GitHub, click your GitHub profile picture, then click &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Under &lt;strong&gt;Personal settings&lt;/strong&gt;, click &lt;strong&gt;Organizations&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;New Organization&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;In the &lt;strong&gt;Organization name&lt;/strong&gt; field, enter &lt;code&gt;my-storefront&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Create organization&lt;/strong&gt;, then click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="step-2-load-the-accelerator-reference-blueprint-for-the-storefront-application"&gt;Step 2: Load the Accelerator Reference Blueprint for the StoreFront application&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;From your IBM Cloud Pak for Applications landing page, click &lt;strong&gt;Build Solution&lt;/strong&gt; to start the Solution Builder tool.&lt;/li&gt;&lt;li&gt;Load the StoreFront Reference Blueprint onto the canvas by clicking &lt;strong&gt;New Blueprint&lt;/strong&gt; and choose &lt;strong&gt;(Ref) StoreFront&lt;/strong&gt; from the list of available blueprints.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From the menu bar, click &lt;strong&gt;More Options &amp;gt; Save As&lt;/strong&gt;, enter a new name, and save your own copy of the blueprint as shown in the following screen capture:&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/tutorials/accelerator-for-cloud-native-apps/images/storefront-save-as.jpg" class="kg-image" alt="The Solution Builder user interface, showing the **More Options** menu and the StoreFront application topology"&gt;&lt;/figure&gt;&lt;p&gt;The screen capture also shows the application topology. The Web Backend for Frontend (&lt;code&gt;webbff&lt;/code&gt;) microservice provides the user interface to the online store. This REST-based microservice binds to four other REST-based microservices that are responsible for querying customer records, items in the shopping catalog, order records, and inventory records. Each microservice has its own backend database.&lt;/p&gt;&lt;p&gt;Click each of the components in turn to discover the configuration settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;webbff&lt;/code&gt; component is configured to build a microservice from the Node.js Express application stack.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;Customer&lt;/code&gt;, &lt;code&gt;Catalog&lt;/code&gt;, &lt;code&gt;Order&lt;/code&gt;, and &lt;code&gt;Inventory&lt;/code&gt; components are configured to build microservices from the &lt;a href="httpsssssss://developer.ibm.com/components/open-liberty/"&gt;Open Liberty&lt;/a&gt; application stack. Each microservice connects to a backend database.&lt;/li&gt;&lt;li&gt;All the backend databases run on PostgresSQL 11.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="step-3-add-configuration-details-for-github"&gt;Step 3: Add configuration details for GitHub&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;From the menu bar, click &lt;strong&gt;Blueprint properties&lt;/strong&gt; and add the URL for your GitHub organization in the &lt;strong&gt;Git Properties&lt;/strong&gt; field, as shown in the following diagram:&lt;/li&gt;&lt;/ul&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://silverky.github.io/content/images/2020/06/storefront-properties.jpg" class="kg-image" srcset="httpsssssss://silverky.github.io/content/images/size/w600/2020/06/storefront-properties.jpg 600w, httpsssssss://silverky.github.io/content/images/size/w1000/2020/06/storefront-properties.jpg 1000w, httpsssssss://silverky.github.io/content/images/size/w1600/2020/06/storefront-properties.jpg 1600w, httpsssssss://silverky.github.io/content/images/size/w2400/2020/06/storefront-properties.jpg 2400w"&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;Uncheck the boxes for adding GitOps staging and production environments.&lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to save your changes in the &lt;strong&gt;Blueprint Properties&lt;/strong&gt; pane.&lt;/li&gt;&lt;li&gt;From the menu bar, click the &lt;strong&gt;Save Blueprint&lt;/strong&gt; icon to save your Solution Blueprint.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id="step-4-generate-the-repositories-on-github"&gt;Step 4: Generate the repositories on GitHub&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Generate a GitHub personal access token on GitHub that gives you full control of any repositories in your organization and copy it to your clipboard. For help, see &lt;em&gt;&lt;em&gt;&lt;a href="httpsssssss://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line"&gt;Creating a personal access token for the command line&lt;/a&gt;&lt;/em&gt;&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;In Solution Builder, click &lt;strong&gt;Generate&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;When asked for your GitHub credentials, enter your GitHub user ID and paste your Personal Access Token into the &lt;strong&gt;Git Token&lt;/strong&gt; field.&lt;/li&gt;&lt;li&gt;Click &lt;strong&gt;Generate&lt;/strong&gt; again.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As Solution Builder generates the repositories, an &lt;strong&gt;Execution window&lt;/strong&gt; indicates progress. Running processes are shown in light green and turn to dark green when complete.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/tutorials/accelerator-for-cloud-native-apps/images/storefront-execution.jpg" class="kg-image" alt="Diagram of the Execution Window, which  is explained in the surrounding text"&gt;&lt;/figure&gt;&lt;h3 id="step-5-check-that-all-the-github-repositories-were-generated-successfully"&gt;Step 5: Check that all the GitHub repositories were generated successfully&lt;/h3&gt;&lt;p&gt;Go to your GitHub organization to view the repositories.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/tutorials/accelerator-for-cloud-native-apps/images/storefront-git-repo.jpg" class="kg-image" alt="Diagram of the GitHub organization with all the repositories that make up the application"&gt;&lt;/figure&gt;&lt;p&gt;A GitHub code repository is created for each microservice in the StoreFront application.&lt;/p&gt;&lt;p&gt;Each microservice repository contains an &lt;code&gt;app-deploy.yaml&lt;/code&gt; file, which is the configuration file that is used by the &lt;em&gt;&lt;em&gt;Appsody Operator&lt;/em&gt;&lt;/em&gt; to deploy a project. You can see information about the application stack and the endpoints exposed for the microservice. The following section from the &lt;code&gt;app-deploy.yaml&lt;/code&gt; file in the &lt;code&gt;webbff&lt;/code&gt; repository identifies the &lt;code&gt;webbff&lt;/code&gt; microservice as part of the StoreFront application, running on the &lt;code&gt;nodejs-express&lt;/code&gt; stack, v 0.4.8.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;...
labels:
  app.kubernetes.io/part-of: storefront
  image.opencontainers.org/title: webbff
  stack.appsody.dev/id: nodejs-express
  stack.appsody.dev/version: 0.4.8
name: webbff
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A single GitOps repository, &lt;code&gt;gitops-dev&lt;/code&gt;, is also created that contains configuration information for the development deployment environment.&lt;/p&gt;&lt;p&gt;In the &lt;code&gt;gitops-dev&lt;/code&gt; repository, the &lt;code&gt;environments/storefront-dev/env/base/namespace.yaml&lt;/code&gt; shows that the target namespace for the application is &lt;code&gt;storefont-dev&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Namespace
metadata:
  name: storefront-dev&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The repositories contain the scaffolding for the application. The microservices repositories contain sample code that runs and the GitOps repository contains the configuration to deploy all of the microservices and establish the bindings to the PostgresSQL database. At this stage, the business logic to drive the StoreFront application is missing. However, to learn how to implement the end-to-end workflow, you can continue to deploy the application in its present state.&lt;/p&gt;&lt;h3 id="step-6-preparing-your-deployment-environment"&gt;Step 6: Preparing your deployment environment&lt;/h3&gt;&lt;p&gt;......................................&lt;/p&gt;</content:encoded></item><item><title>Deploy Spring Boot microservices on Kubernetes</title><description>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Spring Boot is an opinionated framework for quickly building production-ready Spring applications. This pattern shows you how to create and deploy Spring Boot microservices within a polyglot application and then deploy the app to a Kubernetes cluster.&lt;/p&gt;&lt;h2 id="description"&gt;Description&lt;/h2&gt;&lt;p&gt;The Java community is finding innovative ways to use technologies like&lt;/p&gt;</description><link>httpsssssss://silverky.github.io/deploy-spring-boot-microservices-on-kubernetes/</link><guid isPermaLink="false">5ee6f12ba9bc1715a4b41003</guid><category>spring</category><category>Kubernetes</category><dc:creator>dungbv</dc:creator><pubDate>Mon, 15 Jun 2020 03:55:44 GMT</pubDate><content:encoded>&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;Spring Boot is an opinionated framework for quickly building production-ready Spring applications. This pattern shows you how to create and deploy Spring Boot microservices within a polyglot application and then deploy the app to a Kubernetes cluster.&lt;/p&gt;&lt;h2 id="description"&gt;Description&lt;/h2&gt;&lt;p&gt;The Java community is finding innovative ways to use technologies like Java EE within microservices architectures. The Spring framework is an established presence in the Java ecosystem, and now Spring Boot is garnering a lot of attention because it radically simplifies writing a Spring application.&lt;/p&gt;&lt;p&gt;Spring Boot takes an opinionated view of building Spring applications. You can use Spring Boot to create stand-alone Java applications that can be started using the Java &lt;code&gt;-jar&lt;/code&gt; command or more traditional WAR deployments. Spring applications can be deployed as WAR files atop existing app servers, or they can be built into a “fat” JAR file with an embedded app server. Either choice works well within a Docker container. You can then rely on native Spring platforms like Spring Cloud to perform tasks such as service discovery, registration, and load balancing.&lt;/p&gt;&lt;p&gt;But what do we do in the context of polyglot applications? For managing a system of polyglot microservices, you need a general-purpose microservices and container orchestration platform, and that’s where Kubernetes shines. In this developer pattern, you’ll build an app called Office Space — and yes, it’s inspired by Michael Bolton’s idea in the movie “Office Space.” When you complete the pattern, you’ll understand how to deploy a polyglot microservices application, including Spring Boot microservices, on a Kubernetes cluster.&lt;/p&gt;&lt;h2 id="flow"&gt;Flow&lt;/h2&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="httpsssssss://developer.ibm.com/developer/patterns/deploy-spring-boot-microservices-on-kubernetes/images/Deploy-Spring-Boot-microservices-on-Kubernetes.png" class="kg-image" alt="flow"&gt;&lt;/figure&gt;&lt;ol&gt;&lt;li&gt;The Transaction Generator service written in Python simulates transactions and pushes them to the Compute Interest microservice.&lt;/li&gt;&lt;li&gt;The Compute Interest microservice computes the interest and then moves the fraction of pennies to the MySQL database to be stored.&lt;/li&gt;&lt;li&gt;The database can be running within a container in the same deployment or on a public cloud such as IBM Cloud.&lt;/li&gt;&lt;li&gt;The Compute Interest microservice then calls the notification service to notify the user if an amount has been deposited in the user’s account.&lt;/li&gt;&lt;li&gt;The Notification service uses OpenWhisk actions to send an email message to the user. You can also invoke an OpenWhisk action to send messages to Slack.&lt;/li&gt;&lt;li&gt;Additionally, an OpenWhisk action to send messages to Slack can also be invoked.&lt;/li&gt;&lt;li&gt;The user retrieves the account balance by visiting the Node.js web interface.&lt;/li&gt;&lt;/ol&gt;</content:encoded></item></channel></rss>